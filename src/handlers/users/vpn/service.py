import asyncio
from datetime import datetime, timedelta

from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import types

from database.servers.service import server_service
from .keyboards.callback import servers_info
from database.base_class import BaseService
#
#
# class VpnService:
#     # async def get_servers_by_country(self, country: str):
#     #     servers = await server_service.get_servers_by_country(country)
#     #     servers_lst = []
#     #     for server in servers:
#     #         servers_lst .append(f'{server.country}, {server.price}')
#     #


#     async def get_user_keys(self, user):
#     #     user_keys = await user.keys
#     #
#
#     @staticmethod
#     async def get_servers_list(data: str):
#         server_name = data.split("_")[-1]
#         server_data = servers_info.get(server_name)
#
#         return {
#             f'{server_data["country"]} '
#             f'{server_data["country_flag"]}, '
#             f'100GB,{server_data["price"]}'
#             f'‚ÇΩ/–º–µ—Å—è—Ü': f'server_info_{server_name}'
#         }
#
#     @staticmethod
#     async def get_server_info(data: str):
#         server_name = data.split("_")[-1]
#         server_data = servers_info.get(server_name)
#         server_ping = await get_ping(server_data.get('ip'))
#         text = (
#             f"üåç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {server_data['country_flag']} "
#             f"{server_data['country']}, 100GB, {server_data['price']}‚ÇΩ/–º–µ—Å—è—Ü</b>\n\n"
#             f"üîπ <b>–¢–∏–ø:</b> {server_data['type']}\n"
#             f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {server_data['rating']}\n"
#             f"üì∂ <b>Ping:</b> {server_ping} ms\n"
#             f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {server_data['price']}‚ÇΩ/–º–µ—Å—è—Ü.\n"
#             f"üéÅ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥:</b> {server_data['trial_period']}\n\n"
#             f"‚úÖ –ü–æ–ª—É—á–∞—è –∫–ª—é—á, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ <a "
#             f"href='https://example.com/rules'>–ø—Ä–∞–≤–∏–ª–∞</a>."
#         )
#         get_key_btn = {"‚úÖ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á": f"get_key_{server_name}"}
#
#         return text, get_key_btn
#
#     async def get_vpn_key(self,
#                           user_id,
#                           callback_query: types.CallbackQuery
#                           ):
#         server_name = (callback_query.data.split("_")[-1])
#         client = await get_vpn_clients(servers_info, server_name)
#
#         create_key = await client[server_name].create_key(key_name=str(user_id))
#         await client[server_name].add_data_limit(key_id=create_key.key_id, limit_bytes=1024 ** 3 * 100)
#
#         text = (
#             f"‚úÖ *–í–∞–º –≤—ã–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –Ω–∞ 30 –º–∏–Ω*\n\n"
#             f"–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ "
#             f"—Å–ø–∏—Å–∞—Ç—å —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª—é—á–∞ {servers_info[server_name]['price']}‚ÇΩ/–º–µ—Å—è—Ü.\n"
#             f"–ï—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞—Å—Ç—Å—è, –∫–ª—é—á –±—É–¥–µ—Ç *—É–¥–∞–ª–µ–Ω*!\n\n"
#             f"‚ö† *–ï—Å–ª–∏ –∫–ª—é—á –≤–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!*\n\n"
#             f"*–í–∞—à –∫–ª—é—á:* ‚¨áÔ∏è"
#         )
#         key = await client[server_name].get_key(create_key.key_id)
#
#         access_url = f'{key.access_url}&prefix=POST%20'
#
#         task = asyncio.create_task(
#             self.add_key_to_db(
#                 key.key_id,
#                 user_id,
#                 access_url
#             )
#         )
#
#         # check_balance.apply_async(args=[str(user_id), create_key.key_id], countdown=10)
#
#         return access_url, text
#
#     async def add_key_to_db(self,
#                             key_id: int,
#                             tg_user_id: int,
#                             access_url: str,
#                             ):
#         user = await self.get_one(str(tg_user_id))
#
#         if not user:
#             user_data = UserCreate(
#                 tg_user_id=str(tg_user_id)
#             )
#             await self.create(user_data)
#             user = await self.get_one(str(tg_user_id))
#
#             key_data = KeyCreate(
#                 id=key_id,
#                 access_url=access_url,
#                 user_id=user.id,
#                 expiry_date=(datetime.utcnow() + timedelta(days=30)).date()
#
#             )
#         else:
#             key_data = KeyCreate(
#                 id=key_id,
#                 access_url=access_url,
#                 user_id=user.id,
#                 expiry_date=(datetime.utcnow() + timedelta(days=30)).date()
#             )
#         await self.create(key_data)
#
#         return {"response": "success"}
#
#
vpn_service = VpnService()
