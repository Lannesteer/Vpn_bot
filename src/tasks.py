# import asyncio
#
# from src.bot.schemas import UserUpdate
# from src.database import get_service



# def check_balance(user_id: str, key_id: int):
#     from src.bot.service import UserService, KeyService
#     loop = asyncio.new_event_loop()
#     asyncio.set_event_loop(loop)
#     print('–∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞')
#
#     async def async_task():
#         print('–∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞')
#         session = await get_service(KeyService)
#         key_service = KeyService(session)
#
#         session_user = await get_service(UserService)
#         user_service = UserService(session_user)
#
#         user = await user_service.get_one(user_id)
#
#         if user and user.balance < 200:
#             await key_service.delete(key_id)
#             print(f"‚ùå –ö–ª—é—á {key_id} —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤.")
#         else:
#             data = UserUpdate(balance=user.balance - 200)
#             await user_service.update(data, user_id)
#             print(f"üí∞ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–ø–∏—Å–∞–Ω–æ 200 ‚ÇΩ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞.")
#
#     loop.run_until_complete(async_task())
#     loop.close()
